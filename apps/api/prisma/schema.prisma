// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String?
  email     String  @unique
  avatarUrl String? @map("avatar_url")

  accounts Account[]
  wishlist Wishlist[]
  customer Customer?
  orders   Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Customer {
  id String @id @default(uuid())

  gatewayId String @map("gateway_id")
  cellphone String
  taxId     String

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Category {
  id   String @id @default(uuid())
  name String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String
  price       Decimal
  quantity    Int

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")

  productImage ProductImage[]
  wishlist     Wishlist[]
  orders       OrderProduct[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("images")
}

model Wishlist {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, productId])
  @@map("wishlist")
}

enum OrderBilling {
  PIX
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id        String @id @default(uuid())
  gatewayId String @map("gateway_id")

  total Decimal
  url   String

  products OrderProduct[]
  address  Address[]

  billing OrderBilling @default(PIX)
  status  OrderStatus  @default(PENDING)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderProduct {
  orderId   String @map("order_id")
  productId String @map("product_id")
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
  @@map("order_products")
}

model Address {
  id String @id @default(uuid())

  cep          String
  address      String
  number       String
  complement   String?
  neighborhood String

  city  String
  state String

  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("addresses")
}
